SWEN-250 Activity Journal
Ruby – Grades CSV

Name: Aidan Sawyer

RELEASE 1 - grades_util.rb & test_grades.rb
================================================================
Release 1 Implement & Test get_CSV_line() - Start
Estimated Time	00 20
Plan for this level:
  -read docs
  -write tests for get_CSV_line()
  -write code 
  -test, debug, and refactor.

Level 1 – Complete
Actual Time	00 15
Notes: Lessons learned, problems encountered, obstacles overcome, etc.

LL:
  -tests take a lot more time than code if you're doing it "right".
   especially for really simple, basic functions

================================================================

================================================================
Release 1 Implement & Test numeric_to_letter() - Start
Estimated Time	00 30
Plan for this level:

Plan for this level:
  -read docs
  -write tests
  -write code
  -test, debug, and refactor

Level 1 – Complete
Actual Time	01 00

Notes: Lessons learned, problems encountered, obstacles overcome, etc.

PE:
  -had to double check on some of the requirements and edit to fill them

LL:
  -writing to tests can really simplify the coding process, even though
   it has the tendency to prolong it.
================================================================

================================================================
Release 1 Implement & Test sum_weights() - Start
Estimated Time	00 25
Plan for this level:
  -read docs
  -write tests
  -write code
  -test, debug, refactor

Level 1 – Complete
Actual Time	00 30
Notes: Lessons learned, problems encountered, obstacles overcome, etc.

PE:
  -i did weights wrong in compute_grade(). not looking for floats,
   i'm creating them

LL:
  -reading the requirements document and example runs is pretty 
   important. don't assume things. especially when testing

================================================================

================================================================
Release 1 Implement & Test compute_grade() - Start
Estimated Time	00 45
Plan for this level:
  -read docs
  -write tests
  -write code
  -test, debug and refactor

Level 1 – Complete
Actual Time	00 50
Notes: Lessons learned, problems encountered, obstacles overcome, etc.

LL:
  -coding the helper functions can be made more difficult when you don't
   have a full grasp of what they're going to be called for/with. i 
   anticipate that i'll have to edit it later with the full implementation
  -if you're going to make robust and unbreakable software, you have a 
   lot of messy input to handle


================================================================

RELEASE 2 - grades.rb
================================================================
Release 2 -Level 1 – Start
Estimated Time	00 45
Plan for this level:
  -set up incrementor to differentiate between header line and the
   ones that follow it.
  -store list of values in a bigger list such that i'll have a 
   list of students with each students values with basic formating
  -beginning printout/checks
  -add a way to handle the '% symbols'

Level 1 – Complete
Actual Time	01 15
Notes : Lessons learned, problems encountered, obstacles overcome, etc.

PE:
  -'%' took some extra time i didn't expect. formatting for printf
   was weird and it took me a while to think of looking at the last
   character in the printout for adding it.

LL:
  -programming it this way and not in a way that would just solve the
   immediate issue should save me time in the long run. looking ahead
   is important.

================================================================

================================================================
Release 2 -Level 2 – Start
Estimated Time	00 35
Plan for this level:
  -edit util file to stop throwing errors and just not include irrelevant
   fields in the summation
  -edit my printing loop, because i misunderstood where the weights were 
   coming from last submission
  -add weights (second line from stdin) into a separate list and send that
   list to sum_weights(). 
  -add an if statement for if it's not equal to 100 (for whatever reason).
   print and return if it's true. no else is needed as it will automatically
   pass on

Level 2 – Complete
Actual Time	00 40
Notes : Lessons learned, problems encountered, obstacles overcome, etc.

LL:
  -unittests can be very useful at the beginning, but sometimes exceptions
   are more work than they're useful for and sometimes they're not needed 
   at all.
  -unittests have to change with new requirements and incremental releases.

PE:
  -hadn't ever heard of "exit" before. that's kind of cool, yet weird.
   i was using return and was getting a weird "jump return" message.
   quick fix.
  -i forgot first to fix the printout with the semicolons and '%'
  -i then forgot to convert the letter grades to numerics. 

================================================================

================================================================
Release 2 -Level 3 – Start
Estimated Time	00 05
Plan for this level:
  -anticipating this as a next step, i already have this functionality 
   complete. i'll double-check some things, test and see.

Level 3 – Complete
Actual Time	00 12
Notes : Lessons learned, problems encountered, obstacles overcome, etc.

LL:
  -the -w tag for diff calls is pretty useful.
  -bash scripts are nice
  -always develop smart, looking ahead with a quality focus.
  -and always test

PE:
  -spent 7+ minutes trying to find random white space difference in my outputs

================================================================

================================================================
Release 2 -Level 4 – Start
Estimated Time	00 25
Plan for this level:
  -add call to compute_grade and test
  -add call to numeric_to_letter() and test
  -edit printout
  -double-check printout
  -try to only commit one "level complete"

Level 4 – Complete
Actual Time	00 40
Notes : Lessons learned, problems encountered, obstacles overcome, etc.

PE: 
  -was doing some integer division unknowingly when dividing by 100 and 
   not 100.0 to get percentage.

LL:
  -print statements work really well to see what's going on so long
   as there aren't too many of them to clutter it
  -always look ahead when doing unittests. i had to keep editing it and it
   was really annoying.

================================================================

================================================================
Release 2 -Level 5 – Start
Estimated Time	00 05
Plan for this level:
  -kind of unknowingly used the letter input from the start of level 2,
   so this should be taken care of. i'll double check it, but i'm pretty 
   sure everything's all set

Level 5 – Complete
Actual Time	00 07
Notes : Lessons learned, problems encountered, obstacles overcome, etc.

PE:
  -i was correct in doing it the other way before, but the printout seemed
   to be the only thing the customer wanted to have change...

LL:
  -flexibility and changability are important. customers can change their mind
   and want to seemingly revert while keeping some element of the old solution.

================================================================

================================================================
Release 2 -Level 6 – Start
Estimated Time	00 20
Plan for this level:
  -add a line of code after the printout for finLetter for each student
   to update the count on the provided lettercount hash.
  -call print_summary() from grades_util.rb 
  -test, debug, refactor
  -complete project summary

Level 6 – Complete
Actual Time	00 35
Notes : Lessons learned, problems encountered, obstacles overcome, etc.

LL:
  -unittests give you important information on how each part of your code
   is working.
  -when you have the time to update/clean-up/comment/over-test your code
   do so. polishing in the gaps is polishing.

PE:
  -I'd forgotten to test valid input into compute_grade(). 

================================================================

OVERALL SUMMARY
================================================================
Estimated Total Time	04 00
Actual Total Time	06 00
Project reflection:

-First off, how the estimations work out to be round is really weird. I swear
that it wasn't on purpose.

HELPERS and SEPARATION OF CONCERNS
  -by far the majority of the project was spent on the beginning couple stages
   and helper functions, and much of the time wasted in the end was on not 
   looking far enough ahead with them. this plays in a bit with separation of
   concerns. if you break up a problem into a bunch of very small problems,
   you get much more managable and readable code.

PLANNING AHEAD:
  -a lot of my time was saved and wasted looking ahead and not looking ahead.
   i essentially skipped over 2 levels because of reading the documentation,
   but also spent a lot of my time having to edit my tests and helpers from 
   what i half-blindly imagined they should do early on.

INCREMENTAL DEV:
  -i generally enjoyed using this model of development as it made change
   and revisioning very simple, quick, and painless. at the same time, though
   i do think it might have been faster and more direct to start out with a 
   more direct approach.
  -one of the things that -was- very beneficial was how easy it was to graft
   on new ideas and features in very little time, keeping everything fairly 
   light-weight and minimizing change cost

UNITTESTING:
  -can be hugely important. knowing that your smaller functions are working
   is very important and lets you keep going without having to look too far
   back very often. this being said, they must be done very carefully and 
   with a significant focus on what is going to be

SCRIPTING:
  -my one bash script was very, very handy. all i had to do was switch the 
   expected output in the output.txt file and i knew my second method of 
   testing was ready.
  -while unittesting can test individual parts, the overall functioning of
   your program is what realy matters, even down to the printouts. using 
   such simple bash scripts can save you a lot of typing and help make sure
   that your over-arching requirements are met.

GIT/VCS:
  -my commit log is really gross for this project and it annoyed me. the 
   indidivual levels were often so small that they could be done in very
   little time and it was hard to remember to commit between them.
  -

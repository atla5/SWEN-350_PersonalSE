SWEN-250 Project Activity Journal
C Health Monitoring System Project - Part 1

Name: Aidan Sawyer

===========  Stage 1  ==========================================
Start
Estimated Time	00 50
Plan:
(Order of implementation, testing approach, estimation technique)

OI:
  -clean up, comment, document, look over requirements, etc.
  -declare variables for id, time, type, value
  -write read_line(&id,&time,&type,&val) method to parse stdin
   and write to the variables declared within while loop in main()
  -write print statements

TA:
  -bash script comparing actual to expected output.
  

Complete
Actual Time	02 15
Observations:
(Lessons learned, problems encountered, obstacles overcome, etc.)

PE: 
  -had a bit of trouble with writing to the timestamp (char * time[]).
   needed to use strcpy() instead of '*time = field'
  -typeKey was acting up because it wasn't inside of the main function

TT: 
  -could have hacked it out sooner, but i wanted to make it as simple
   and efficient as possible.
  -problems with strcpy().

failed compiles: 28

===========  Stage 2  ==========================================
Start
Estimated Time	01 45
Plan:
(Order of implementation, testing approach, estimation technique)

OI:
  -add a bunch of code for storing values using the correct sturctures
  -write any helpers necessary to ensure things are stored in the right
   place each time.
  -write a printChart() function that takes in an ID and call it 
   within the main while loop.

TA:
  -input file
  -bash script (?)

ET:
  -represents a very large change to the system, and some more in-depth
   looks into the structures. 
  -lot of code to write.

Complete
Actual Time	02 15
Observations:
(Lessons learned, problems encountered, obstacles overcome, etc.)

PE:
  -didn't use pointers to start with for the storage section,
   causing me to create and edit a copy of the blank chart in
   record, writing to the copy, and then doing nothing with it.
   took very little time to recognize it after i did the print 
   function
  -when to add/subtract the one to account for the zeroth
   indexing and 1-5 things. 

LL:
  -ensure you're always editing where things are stored and not
   just copying over what's there and changing the new thing. 
   pointers, pointers, pointers.

failed compiles: 17

TT: 135/105 = 1.28
  -mostly the pointer issue caught me up a bit. 

===========  Stage 3  ==========================================
Start
Estimated Time	00 45
Plan:
(Order of implementation, testing approach, estimation technique)

OI:
  -edit storage code just after creating the new element
  -write printout nearby to make it stand out.
  -edit printChart(id) function to match desired output

ET:
  -should just be a problem of adding a few lines to my storage
   and then adding a few to match that in my print. nothing big
   is changing here.

TA:
  -bash script with input file

Complete
Actual Time	00 40
Observations:
(Lessons learned, problems encountered, obstacles overcome, etc.)

PE:
  -mostly keeping track of +1 -1 for indexes again.

LL:
  -break up functions to make them more readable, even if the 
   small functions are wicked small.

===========  Stage 4  ==========================================
Start
Estimated Time	00 30
Plan:
(Order of implementation, testing approach, estimation technique)

OI:
  -write helper function to take a full list and an element to
   add. have it create a list of the same size as the first,
   copy the elements of the original (ls[1..]) and then set
   its last index to the value to be added.
  -test the helper function by itself.
  -write a couple lines to call helper with relevant data and
   then test. 

ET:
  -again, shouldn't be a major change. printout shouldn't even
   change, just the data structure itself.

TA:
  -bash script with input file

Complete
Actual Time	00 45
Observations:
(Lessons learned, problems encountered, obstacles overcome, etc.)

PE:
  -'<' vs '<=' in conditionals.
  -didn't notice that MAXREADINGS was 10 and not 5 for way
   too long

TT: 45/30 = 1.25
  -conditional and refactor took longer than expected

===========  Stage 5  ==========================================
Start
Estimated Time	00 15
Plan:
(Order of implementation, testing approach, estimation technique)

ET:
  -hoping all goes well, it should already do this, and no code
   will have to be written. 

OI:
  -reformat the code
  -write and run some more extensive tests

TA:
  -bash script with input file.

ET:
  -minor changes (if any), refactoring is important, but in
   projects like this, it really shouldn't take too long.

Complete
Actual Time	00 10
Observations:
(Lessons learned, problems encountered, obstacles overcome, etc.)

PE: none

LL:
  -smart programming/design at the beginning saves time.

TT: 10/15 = .6667
  -as expected, didn't need any new code. just added/removed comments

===========  PROJECT PART 1 SUMMARY REFLECTION  =======================

  My experience with this project was very positive. The data structure
took a bit of getting used to, but was reasonable (though start/end were
unnecessary). It was a healthy level of difficulty and it was staggered
well enough so that you knew what was coming and what to plan for. The
only real issue I would take with it would be grading if I hadn't gotten
the later stages figured out. Level 1 and 2 are huge and required a lot
of code. Levels 3-5 were all pretty simple, but are weighted about the 
same.

  I didn't face that many monolithic technical problems, the biggest 
barrier that I did successfully work through was just familiarity with
the language and a bit with pointers. 

  My estimates came out pretty accurately minus the first where I ran
into trouble with my list of strings 'typeKey' being outside of the main
function. other than that things were pretty smooth and predictable. My
estimates did improve across the levels, but i think it was mostly 
due to their simplicity. I did get into a bit of a rhythm which helped
as well. 

================================================================

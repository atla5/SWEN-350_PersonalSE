SWEN-250 Process & Reflection
Rails – Thought Share

Name: Aidan Sawyer [aks5238]

================================================================
Level 0 – Start
Estimated Time	00 10
Plan for this level:
  -run server
  -test general functionality
  -look for typos
  -look for appropriate view/seeds/etc.
  -fix and refresh page

Level 0 – Complete
Actual Time	00 15
Notes : Lessons learned, problems encountered, obstacles overcome, etc.

TT: 15/10 = 1.5
  -took a bit to think of the 'seed' instead of editing the raw database
   entry.

LL:
  -look at the seeds before just editing the database itself (the seed will
   populate the database every time with set objects)

PE:
  -index wasn't too hard to find, but the seed for the db took a bit more time.

================================================================
Level 1 – Start
Estimated Time	00 35
Plan for this level:
  -go through ruby on rails active validations and compare with lvl1 tasks
  -edit thought.rb, using the db schema to find fields.
  -edit thinker.rb, using the db schema to find field names.

Level 1 – Complete
Actual Time	00 45
Notes : Lessons learned, problems encountered, obstacles overcome, etc.

TT: 45/35 = 1.26
  -took a little bit longer than expected with the regexs
  
LL:
  -validations are not that difficult and easily ensure that the database
   contains correct data from the front end before calling the back end.
   
PE:
  -i have little to no familiarity with regexes. rubular was very helpful.

================================================================
Level 2 – Start
Estimated Time	01 15
Plan for this level:
 1: FIND FILE
  -use grep to find occurrences of 'mine' recursively from front directory
  -search through occurrences to see if any seem to match the description 
   and investigate them.
  -look up where this might be in general.
 2: EDIT FILE
  -existing line of code will likely be a ruby/rails-cloaked database query
   which i should just have to edit with something like a (where thinker=self) 
   kind of tag.
  -look up syntax for that in ruby 
 3: test and debug
 4: refactor

Level 2 – Complete
Actual Time	00 45
Notes : Lessons learned, problems encountered, obstacles overcome, etc.

TT: 45/75 = 0.6
  -I'm giving myself a lot of buffer time to find the errors. normally when
   you get there the code doesn't take long to figure out.

LL:
  -asking for help is helpful
  -'index' is the function that populated all of the different tabs by 
   defining @thoughts.

PE:
  -i knew it had to be a database call and i knew it would be in one of
   the controllers, but i couldn't find where.

================================================================
Level 3 – Start
Estimated Time	01 00
Plan for this level:
  *write the thoughts_controller 
  *add thoughts view file. write as per instruction and in the same layout
   as the other view files.
  *fix the routing as per the write-up
  -*use 'rails generate scaffold' and 'rake' to create new field in
   Thought which holds a list of 'thinker_id's
  -edit 'thumbup' to add the active_thinker's id to the list of ids.
  -write 'thumbers' to edit @thinkers to be displayed in the thumbers view.

Level 3 – Complete
Actual Time	02 30
Notes : Lessons learned, problems encountered, obstacles overcome, etc.

TT: 150/60 = 2.5
  -i got hardcore stuck on figuring out this integer list thing with the rails
   model. the field i created with the 'rails generate' and 'rake' command 
   did effectively add to the table an integer field (as displayed in
   SQLiteManager), but every time i tried to use it (thought.thumbers) i'd get 
   a "method does not exist" or "no attribute 'thumbers' in nil class" and i 
   couldn't figure out why. 
   
PE:
  -finding the right 10 files to edit if i wanted to make a small change
  -the lack of documentation i could find on how to make lists of things in 
   a rails model

LL:
  -web development is much less straight-forward and more time-consuming 
   than normal application development. it takes practice and a good memory
   for what all you have to change per change.

================================================================
Level 4 - Start
Estimated Time  0 55
Plan for this level:
  -write/run rails command to 'AddEmailToThinker' for the model
  -write validation
  -add email field to 'new thinker' and 'edit thinker' pages
  -show email on the profile page

Level 4 - Complete
Actual Time 00 45
Notes : Lessons learned, problems encountered, obstacles overcome, etc.

Time: 45/55 = 0.81
  -took less time than i allotted because i was able to get some help finding
   where '_form' was. other than that i didn't have much trouble finding and
   fixing what i needed

LL:
  -again, help is helpful. helped to break down a wall much faster
  -adding new fields to an existing table is a lot easier than it would seem 
   at first, you just have to know where to go to do things with it afterwards.

================================================================
Level 5 – Start
Estimated Time	00 05
Plan for this level:
  -since i wanted to already have this 'thought.thumbers' field which was a 
   list of 'thinker_id's who had thumbed the thought already, all i would have
   needed was to surround the existing 'thumbup' code in the conditional block 
   below:
	 'if not @thought.thumbers.include?(@active_thinker.thinker_id){ }'
   this would have made it so that if the current thinker already thumbed-up
   the thought, his id would already be in that list, and his 'thumbup' would
   have no effect. would have been like 2 lines and 5 minutes.
		

Level 5 – Complete
Actual Time	HH MM
Notes : Lessons learned, problems encountered, obstacles overcome, etc.

PE:
  -couldn't get the integer list 'thought.thumbers' to work correctly in 
   level 3. 
  
================================================================
Overall Summary
Estimated Total Time	04 00
Actual Total Time	05 00

Overall Time Ratio: 300/240 = 1.25
  -if everything went smoothly and i hadn't hit that wall with the int[]
   i would be under time, but that mistake/block hurt me.
  -other than level 3 i was pretty accurate with my time estimates. i left
   a fair amount of buffer space for learning the new stuff i didn't know
   and sometimes i used it, sometimes i didn't. this general system is very
   important and one i'll definitely try to use more in later courses. it's
   very critical to know your weaknesses and strengths and how long things 
   should take you given starting knowledge and aptitude for the problem arena.
   

Project reflection:
  -This project was interesting. I did learn a fair amount about web dev from
  it and i think it will be very good for my resume to say that i've dabbled in
  both rails and django. 
  -I wouldn't say I got all that more proficient with ruby, since a lot of what
  I wrote/edited was in html and rails. the biggest things i learned from this 
  projects was about how commands are passed with the url, how they're 
  interpreted by the router, how the file structure is organized and why, and
  the general process of small changes echoing around through the controllers,
  models, views, etc. 
    I'm not positive I'd say I really like web development as much as vanilla
  coding at this point, but it was something new to try and the idea of what 
  you create is really interesting and powerful. It's definitely something 
  that's going to be important to my career later on and I'll try and learn not
  to mind that as much as I kind of do right now. 
  
  -My biggest trouble with web dev is probably with the database stuff. I'm so
  used to thinking in conventional data structures and this forces you back to
  linking tables and using primitives and everything. Annoying, but 
  understandable. Databases are extremely powerful and justified, it's just 
  a pain at first.
  
  -In the future giving a little more explanation and hand-holding for the
  data structure differences and how they need to be echoed throughout the 
  system would be a big help. A more thorough description of views vs. 
  controllers vs. models vs etc would be really helpful as well.

